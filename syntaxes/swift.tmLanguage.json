{
  "name": "Swift",
  "scopeName": "source.swift",
  "fileTypes": ["swift"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#attributes"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.swift",
          "match": "//.*$"
        },
        {
          "name": "comment.block.swift",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.swift",
          "match": "\\b(if|else|for|while|do|switch|case|default|break|continue|fallthrough|return|throw|try|catch|finally|defer|guard|where|repeat)\\b"
        },
        {
          "name": "keyword.declaration.swift",
          "match": "\\b(class|struct|enum|protocol|extension|func|var|let|typealias|associatedtype|subscript|init|deinit)\\b"
        },
        {
          "name": "keyword.modifier.swift",
          "match": "\\b(public|private|internal|fileprivate|open|static|final|override|mutating|nonmutating|lazy|weak|unowned|optional|required|convenience|dynamic|infix|prefix|postfix|operator)\\b"
        },
        {
          "name": "keyword.other.swift",
          "match": "\\b(import|as|is|super|self|Self|Type|throws|rethrows|willSet|didSet|get|set)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.swift",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.swift",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.line.swift",
              "begin": "\\\\\\(",
              "end": "\\)",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.swift",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.swift",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.swift",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.swift",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.swift",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.octal.swift",
          "match": "\\b0o[0-7]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.swift",
          "match": "[+\\-*/%=<>!&|^~?:]"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.swift",
          "match": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.swift"
            },
            "2": {
              "name": "entity.name.function.swift"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.swift",
          "match": "\\b(String|Int|Double|Float|Bool|Array|Dictionary|Set|Optional|Any|AnyObject|Void)\\b"
        },
        {
          "name": "entity.name.type.swift",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "storage.type.attribute.swift",
          "match": "@[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    }
  }
}
